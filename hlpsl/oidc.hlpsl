%% PROTOCOL: OpenID Connect
%% PURPOSE: Web Single Sign-On
%% REFERENCE: http://openid.net/specs/openid-connect-core-1_0.html
%% MODELERS: Ghada Zamzmi, Hernan Palombo
%% LAST UPDATE: Apr 18th, 2014
%% ROLES: U is user, C is client, A is authorization server
%% ALICE_BOB:
%% 1.  U -> C : LoginReq, (U.Uid)
%% 2.  C -> A : AuthReq, (Cid.Uid)
%% 3.  C -> U : LoginRedir, (Cid.ServerURI) %TODO what happens if user is already logged in?
%% 4.  U -> A : UserLogin, (Uid.Cid.{Upwd}_Kau) %TODO check for replay attacks here
%% 5.  A -> C : AuthResp, ({Cid.Uid.AuthCode}_Kac.Hash(AuthCode)) %TODO remove enc from here to find attack
%% 6.  A -> U : SuccessRedir, (Cid)
%% 7.  C -> A : AccessReq, ({AuthCode}_Kac)
%% 8.  A -> C : AccessResp, ({IDTok.AccessTok}_Kac)
%% 9.  C -> A(R) : ResourceReq, ({AccessTok}_Kac)
%% 10. A(R) -> C : ResourceResp, ({Resource}_Kac)
%%
%% to run: $ avispa oidc_v6.hlpsl
%%
%% v7:
%%  This version implements the AuthN Flow including RespReq/Resp from TokEndpoint, and ResourceReq/Resp from Resource Server
%%
%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

role user (
  U, C, A: agent, % user needs to know about other roles
  Kau: symmetric_key,
  Uid, Upwd: text, % the user id and password
  SND_CU, RCV_CU, SND_AU, RCV_AU: channel(dy)
) played_by U def=

  local 
    State : nat,
    ServerURI: text,
    Cid: text % client id

  init State := 0

  transition
  % Send LoginReq
  0. State  = 0 /\ RCV_CU(start) =|>
     State':= 1
     /\ SND_CU(U.Uid)
  % Receive LoginRedir and send LoginAttempt
  1. State = 1 /\ RCV_CU(Cid'.ServerURI') =|>
     State' := 2
%     /\ request(U, C, u_c_cid_suri, Cid'.ServerURI') %% vul' 1: i can spoof cid & suri (phishing)
     /\ SND_AU(Uid.Cid'.{Upwd}_Kau.ServerURI')
     /\ witness(A, U, s_u_auth, Uid.Upwd.ServerURI') %%% (even though the uid & suri could be sent by the intruder to the S, the upwd would not match and would not be able to authN the i)
     /\ RCV_AU(Cid)
end role

role client (
  C, A: agent, 
  Kac: symmetric_key,
  Cid, ServerURI: text,
  Hash: hash_func,
  RCV_UC, SND_UC, SND_AC, RCV_AC: channel(dy)
) played_by C def=

  local 
    State : nat,
    U: agent,  % U is a browser and the C does not know U
    Uid: text,  % OpenID URL (e.g., http://user.myopenid.com)
    AuthCode: text

 init State := 0

 transition
  % receive LoginRequest, send AuthNReq
  0. State  = 0  /\ RCV_UC(U.Uid')
     =|>
     State':= 1
     /\ SND_AC(Cid.Uid')
     /\ SND_UC(Cid.ServerURI)
     /\ witness(U, C, u_c_cid_suri, Cid.ServerURI)
     /\ witness(A, C, s_c_cid, Cid)
  % Receive AuthNResp
  1. State=1 /\ RCV_AC({Cid.Uid.AuthCode'}_Kac.Hash(AuthCode')) =|>
    State':=2
      /\ secret(AuthCode', sec_authncode, {A,C})
  % Send TokReq
  2. State=2 =|>
    State':=3
      /\ SND_AC({AuthCode}_Kac)
end role

role authorization_server (
  A, U, C: agent,
  Kac, Kau: symmetric_key,
  Uid, Upwd, Cid, ServerURI, Resource: text,
  Hash: hash_func,
  SND_CA, RCV_CA, SND_UA, RCV_UA: channel(dy)
) played_by A def=

  local 
    State: nat,
    AuthCode, IDTok, AccessTok: text

  init State := 0

  transition
  % Receive AuthRequest
  0. State  = 0  /\ RCV_CA(Cid.Uid) =|>
     State':= 1
  % Receive LoginAttempt, send AuthNResp and SuccessRedir
  1. State = 1 /\ RCV_UA(Uid'.Cid'.{Upwd'}_Kau.ServerURI') =|>
     State':= 2
      /\ request(A, U, s_u_auth, Uid'.Upwd'.ServerURI') % authN U on uid & pwd
      /\ request(A, C, s_c_cid, Cid') % authN C on Cid received from U
      /\ AuthCode' := new()
      /\ SND_CA({Cid.Uid.AuthCode'}_Kac.Hash(AuthCode')) %AuthNResp
      /\ secret(AuthCode', sec_authncode, {A,C})
      /\ SND_UA(Cid) % SuccessRedir
  %
  2. State = 2 /\ RCV_CA({AuthCode}_Kac) =|>
    State'=3
  % TODO add steps 9 & 10
end role

role session(
  U, C, A: agent,
  Kac, Kau: symmetric_key, % shared-keys
  Uid, Upwd, Cid, ServerURI, Resource: text,
  Hash: hash_func
) def=

  local
    SCU, RCU,
    RUC, SUC,
    SAC, RAC,
    SAU, RAU,
    SUA, RUA,
    SCA, RCA: channel (dy)

composition
  user(U, C, A, Kau, Uid, Upwd, SCU, RCU, SAU, RAU)
  /\ client(C, A, Kac, Cid, ServerURI, Hash, RUC, SUC, SAC, RAC)
  /\ authorization_server (A, U, C, Kac, Kau, Uid, Upwd, Cid, ServerURI, Resource, Hash, SCA, RCA, SUA, RUA)

end role

role environment() def=
  const 
  u_c_cid_suri, s_u_auth, s_c_cid, sec_authncode: protocol_id, % goals
  u, c, s: agent,
  uid: text,
  pwd: text,
  cid: text,
  suri: text,
  kac, kau, kcu, 
  kic, kiu, kia: symmetric_key,
  h: hash_func
 
 intruder_knowledge = {u, c,  s, uid, suri}

 composition
   session(u, c, s, kac, kau, uid, pwd, cid, suri, h)
   /\ session(u, c, i, kic, kiu, uid, pwd, cid, suri, h)
   /\ session(u, i, s, kia, kau, uid, pwd, cid, suri, h)
   /\ session(i, c, s, kac, kia, uid, pwd, cid, suri, h)
end role

goal
  authentication_on u_c_cid_suri % the user checking for integrity of the login redirect by the client (check against phishing) (not passed)
  authentication_on s_u_auth % the server authN of the user (solved with encryption)
  authentication_on s_c_cid % the server authN of the client (solved with encryption)
  secrecy_of sec_authncode % secrecy of the authZ token
end goal

environment()
